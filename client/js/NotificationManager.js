/** * Observer Pattern, Static, notification / event class. */let instance = null;let interestObj = {};export default class NotificationManager{    static regisiterNotificationInterest( interest, callBack, scope, id )    {        if( !interestObj ) interestObj = {};    	if( !interestObj[ interest ] ) interestObj[ interest ] = [];        this.removeNotificationInterest( interest, callBack, scope, id ); // makes sure it's not added twice.        interestObj[ interest ].push({ callback:callBack, scope:scope, id:id });    }    static regisiterNotificationInterests( interests, callBack, scope, id )    {        if( !interests || !interests.length ) return null;        interests.forEach(( interest ) =>        {            this.regisiterNotificationInterest( interest, callBack, scope, id );        });    }    static sendNotification( interest, data )    {        if( !interestObj || !interestObj[ interest ] || interestObj[ interest ].length === 0 )        {            return;        }        let length = interestObj[ interest ].length;        let scope;        let callBack;        let eventObj;        let returnObj = {};        for( let i = 0; i < length; i++ )        {            if( !interestObj[ interest ][ i ] ) continue;                        eventObj = interestObj[ interest ][ i ];            callBack = eventObj.callback;            scope = eventObj.scope;            returnObj.interest = interest;            returnObj.data = data;                        if( callBack ) scope[ callBack ]( returnObj );        }    }    static removeNotificationInterest( interest, callBack, scope, id, all )    {        if( !interestObj || !interestObj[ interest ] || interestObj[ interest ].length === 0 )        {            return null;        }                if( all )        {            delete interestObj[interest];            return null;        }        let length = interestObj[ interest ].length -1;        let obj;        for( let i = length; i > 0; i-- )        {            obj = interestObj[ interest ][ i ];            if( !obj ) continue;            if(( id && obj.id && id === obj.id ))            {            	interestObj[ interest ].splice( i, 1 );                break;            }        }    }    static removeNotificationInterests( interests, callBack, scope, id )    {        if( !interests || !interests.length ) return null;        let length = interests.length;        let interest;        for( let i = 0; i < length; i++ )        {            interest = interests[ i ];            this.removeNotificationInterest( interest, callBack, scope, id );        }    }    static destroy()    {        interestObj = null;        instance = null;    }}